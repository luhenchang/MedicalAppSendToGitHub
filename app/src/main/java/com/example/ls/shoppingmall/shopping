   Unknow(0),

    SCHEDULER_ERROR(101),//计划任务异常

    RegisterRepeat(10001),//用户名已注册
    VerifyCodeExp(10002),//验证码过期或无效
    Locked(10003),//账户已锁定
    LoginNameOrPwdError(10004),//账户或密码错误
    TokenInvalid(10005),//token无效
    WECHAT_AUTH_ERROR(10006),//微信授权异常
    WECHAT_NOT_AUTHORIZED(10007),//微信用户未授权
    WECHAT_CODE_INVALID(10008),//微信CODE无效
    SMS_MOBILE_NOT_EXIST(10009),//短信-错误的手机号码
    SMS_OTHER_ERROR(10011),//短信-其他原因
    USER_NOT_EXIST(10012),//用户不存在
    ACCOUNT_CASH_LACK(10013),//账户余额不足
    ACCOUNT_MALL_VIP_USED(10014),//VIP优惠已使用，无法退款
    SMS_CONN_ERROR(10015),//短信-网络错误，请重试
    SMS_QUICK_ERROR(10016),//短信-号码异常/同一号码发送次数过于频繁
    ACCOUNT_NOT_MALL_VIP(10017),//用户不是商品vip
    HEALTH_INFO_STATUS_ERROR(10018),//家庭健康表状态有误
    RECHARGE_USE(10019),//有正在使用的充值记录
    NON_PRINCIPAL(10020),//没有本金
    RECHARGE_REFUND_FEE_ERROR(10021),//充值状态不对或金额有误

    ProprietorVerifyError(20001),

    MALL_INVALID(30001),//商品下架
    MALL_NOT_EXIST(30002),//商品不存在
    MALL_CART_ERROR(30003),//购物车异常
    ORDER_STATUS_ERROR(30004),//订单状态错误
    ORDER_NOT_EXIST(30005),//订单不存在
    ORDER_REFUND_ERROR(30006),//订单退款失败
    FAVORITES_EXISTS(30007),//收藏已存在
    FAVORITES_NOT_EXISTS(30008),//收藏不存在
    ADDRESS_IDNO_ERROR(30009),//身份证不正确
    VIP_ORDER_NOT_ENOUGH(30010),//order为营养套餐商品，没有达到指定金额
    ADDRESS_NOT_EXIST(30011),//地址不存在
    TRACKINFO_NOT_EXIT(30012),//没有物流信息
    HEALTH_WAIT_RECOMMEND(30013),//营养师推荐订单后才能重新编辑
    SUPPLIER_INVALID(30014),//营养师推荐订单-商品不合适
    RECOMMEND_ORDER_SEND_ERROR(30015),//推荐订单发送失败
    MALL_REFUND_FEE_POOR(30016),//退款金额设置不合理
    ARTICLE_INVALID(30017),//文章不存在或下架
    WITHDRAW_EXIST(30018),//已申请提现
    WITHDRAW_INVALID(30019);//提现单无效

 refreshLayout.setOnRefreshListener(new OnRefreshListener() {
            @Override
            public void onRefresh(RefreshLayout refreshlayout) {
                initData();
                refreshlayout.finishRefresh(1000/*,false*/);//传入false表示刷新失败
            }
        });
        refreshLayout.setOnLoadMoreListener(new OnLoadMoreListener() {
            @Override
            public void onLoadMore(RefreshLayout refreshlayout) {
                refreshlayout.finishLoadMore(1000/*,false*/);//传入false表示加载失败
            }
        });

     <com.scwang.smartrefresh.layout.SmartRefreshLayout
            android:id="@+id/refreshLayout"
            android:layout_below="@+id/top_header"
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <com.scwang.smartrefresh.layout.header.ClassicsHeader
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />
          <com.scwang.smartrefresh.layout.footer.ClassicsFooter
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content" />
    </com.scwang.smartrefresh.layout.SmartRefreshLayout>


       @Override
        public boolean onKeyDown(int keyCode, KeyEvent event) {
            if(keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN){
                if((System.currentTimeMillis()-exitTime) > 2000){
                    Toast.makeText(getApplicationContext(), "再按一次退出程序", Toast.LENGTH_SHORT).show();
                    exitTime = System.currentTimeMillis();
                } else {
                    finish();
                    System.exit(0);
                }
                return true;
            }
            return super.onKeyDown(keyCode, event);
        }


     InputFilter inputFilter = new InputFilter() {
                Pattern pattern = Pattern.compile("[^a-zA-Z0-9\\.\\,\\!\\“\\”\\/\\@\\`\\~\\(\\)\\*\\&\\%\\#\\^\\-\\+\\[\\]\\?\\u4E00-\\u9FA5_]");

                @Override
                public CharSequence filter(CharSequence charSequence, int i, int i1, Spanned spanned, int i2, int i3) {
                    Matcher matcher = pattern.matcher(charSequence);
                    if (!matcher.find()) {
                        return null;
                    } else {
                        Toast.makeText(DiseasHistoryActivity.this, "只能输入汉子和字母数字", Toast.LENGTH_SHORT).show();
                        return "";
                    }

                }
            };
editSms.setFilters(new InputFilter[]{inputFilter, new InputFilter.LengthFilter(220)});













   /* private void initView() {
        diaLog = new ProgressDialog(this);
        diaLog.setTitle("提示");
        diaLog.setMessage("正在加载,请等待...");
        diaLog.setCancelable(false);
    }


    *//**
     * TODO 6.1.1 支付宝支付. 调用SDK支付
     *//*
    public void ZfbPay() {
        if (TextUtils.isEmpty(APPID) || (TextUtils.isEmpty(RSA2_PRIVATE) && TextUtils.isEmpty(RSA_PRIVATE))) {
            new android.app.AlertDialog.Builder(this).setTitle("警告").setMessage("需要配置APPID | RSA_PRIVATE")
                    .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialoginterface, int i) {
                            //
                            finish();
                        }
                    }).show();
            return;
        }

        *//**
     * 这里只是为了方便直接向商户展示支付宝的整个支付流程；所以Demo中加签过程直接放在客户端完成；
     * 真实App里，privateKey等数据严禁放在客户端，加签过程务必要放在服务端完成；
     * 防止商户私密数据泄露，造成不必要的资金损失，及面临各种安全风险；
     *
     * orderInfo的获取必须来自服务端；
     *//*
        boolean rsa2 = (RSA2_PRIVATE.length() > 0);
        Map<String, String> params = OrderInfoUtil2_0.buildOrderParamMap(APPID, rsa2);
        params.put("biz_content", "{\"timeout_express\":\"30m\",\"product_code\":\"QUICK_MSECURITY_PAY\",\"total_amount\":\"" + mtotal_amount + "\",\"subject\":\"" + mSubject + "\",\"body\":\"" + mBody + "\",\"out_trade_no\":\"" + PayOrderNo + "\"}");
        String orderParam = OrderInfoUtil2_0.buildOrderParam(params);

        String privateKey = rsa2 ? RSA2_PRIVATE : RSA_PRIVATE;
        String sign = OrderInfoUtil2_0.getSign(params, privateKey, rsa2);
        final String orderInfo = orderParam + "&" + sign;

        Runnable payRunnable = new Runnable() {

            @Override
            public void run() {
                try {
                    PayTask alipay = new PayTask(PayMoneyActivity.this);
                    Map<String, String> result = alipay.payV2(orderInfo, true);
                    Log.i("msp", result.toString());

                    Message msg = new Message();
                    msg.what = SDK_PAY_FLAG;
                    msg.obj = result;
                    mHandler.sendMessage(msg);
                }catch (Exception e){
                    Log.e("e",e.toString());
                }
            }
        };

        Thread payThread = new Thread(payRunnable);
        payThread.start();
    }

    *//**
     * 原生的H5（手机网页版支付切natvie支付） 【对应页面网页支付按钮】
     *
     * @param v
     *//*
    public void h5Pay(View v) {
        Intent intent = new Intent(this, H5PayDemoActivity.class);
        Bundle extras = new Bundle();
        *//**
     * url 是要测试的网站，在 Demo App 中会使用 H5PayDemoActivity 内的 WebView 打开。
     *
     * 可以填写任一支持支付宝支付的网站（如淘宝或一号店），在网站中下订单并唤起支付宝；
     * 或者直接填写由支付宝文档提供的“网站 Demo”生成的订单地址
     * （如 https://mclient.alipay.com/h5Continue.htm?h5_route_token=303ff0894cd4dccf591b089761dexxxx）
     * 进行测试。
     *
     * H5PayDemoActivity 中的 MyWebViewClient.shouldOverrideUrlLoading() 实现了拦截 URL 唤起支付宝，
     * 可以参考它实现自定义的 URL 拦截逻辑。
     *//*
        String url = "http://m.taobao.com";
        extras.putString("url", url);
        intent.putExtras(extras);
        startActivity(intent);
    }

    *//**
     * get the out_trade_no for an order. 生成商户订单号，该值在商户端应保持唯一（可自定义格式规范）
     *//*
    private String getOutTradeNo() {
        SimpleDateFormat format = new SimpleDateFormat("MMddHHmmss", Locale.getDefault());
        Date date = new Date();
        String key = format.format(date);

        Random r = new Random();
        key = key + r.nextInt();
        key = key.substring(0, 15);
        return key;
    }

    @OnClick({R.id.back_to_after, R.id.radio_1, R.id.radio_2, R.id.image_view_zfb, R.id.ac_recharg_money_taobao_lin, R.id.pay_button})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.back_to_after:
                finish();
                break;
            case R.id.radio_1:
                payType = "1";
                radio1.setBackgroundResource(R.drawable.ic_checked);
                radio2.setBackgroundResource(R.drawable.ic_uncheck);
                break;
            case R.id.radio_2:
                payType = "0";
                radio2.setBackgroundResource(R.drawable.ic_checked);
                radio1.setBackgroundResource(R.drawable.ic_uncheck);
                break;
            case R.id.image_view_zfb:
                break;
            case R.id.ac_recharg_money_taobao_lin:
                break;
            case R.id.pay_button:
                //TODO 1 点击开始支付：
                //判断金额输入框是整数还是
                mtotal_amount = ((acRechargMoneyEt.getText().toString() == null) || (acRechargMoneyEt.getText().toString().equals(""))) == true ? "" : acRechargMoneyEt.getText().toString();
                if (!mtotal_amount.equals("")) {
                    String[] strs = mtotal_amount.split("[.]");
                    mtotal_amount = strs[0];
                    paySwitch();
                } else {
                    Toast.makeText(this, "输入填写充值金额", Toast.LENGTH_SHORT).show();
                }
                break;
        }
    }

    private void paySwitch() {
        //TODO 2 生成订单号
        PayOrderNo = getOutTradeNo();
        Constants.order_no = PayOrderNo;
        diaLog = new ProgressDialog(this);
        diaLog.setTitle("提示");
        diaLog.setMessage("正在生成订单,请等待...");
        diaLog.setCancelable(false);
        // diaLog.show();
        //TODO 3 生成订单
        new Thread(new MyThreadPay()).start();


    }
    //下面是老版本的支付


    // 随机字符串
    private String genNonceStr() {
        Random random = new Random();
        return MD5.getMessageDigest(String.valueOf(random.nextInt(10000)).getBytes());
    }

    // 微信获取时间戳参数
    private long genTimeStamp() {
        return System.currentTimeMillis() / 1000;
    }


    /**
     * 微信支付签名算法sign
     *
     * @param characterEncoding
     * @param parameters
     * @return
     */
    public static String createSign(String characterEncoding,
                                    SortedMap<Object, Object> parameters) {

        StringBuffer sb = new StringBuffer();
        Set es = parameters.entrySet();// 所有参与传参的参数按照accsii排序（升序）
        Iterator it = es.iterator();
        while (it.hasNext()) {
            @SuppressWarnings("rawtypes")
            Map.Entry entry = (Map.Entry) it.next();
            String k = (String) entry.getKey();
            Object v = entry.getValue();
            if (null != v && !"".equals(v) && !"sign".equals(k)
                    && !"key".equals(k)) {
                sb.append(k + "=" + v + "&");
            }
        }
        sb.append("key=" + Constants.PARTNER_KEY); //KEY是商户秘钥
        String sign = MD5Util.MD5Encode(sb.toString(), characterEncoding)
                .toUpperCase();
        return sign; // D3A5D13E7838E1D453F4F2EA526C4766
        // D3A5D13E7838E1D453F4F2EA526C4766
    }


    // 微信生成签名
    private String genPackageSign(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < params.size(); i++) {
            sb.append(params.get(i).getName());
            sb.append('=');
            sb.append(params.get(i).getValue());
            sb.append('&');
        }
        sb.append("key=");
        sb.append(PARTNER_KEY);

        String packageSign = MD5.getMessageDigest(sb.toString().getBytes()).toUpperCase();
        return packageSign;
    }

    //TODO 4 生成订单 将订单信息提交到到后台
    public class MyThreadPay implements Runnable {

        public void run() {
            if (payType.equals("0")) {
                Map<String, Object> params = new HashMap<String, Object>();
                /*//*  params.put("UserId", UserID);
        *//*    params.put("RechargeAmount", CoinPrice);// 总价
            params.put("PayAmount", CoinAmount + "");// 实际价格
            params.put("PayType", payType + "");// 支付类型（微信0，支付宝1）
            params.put("PayOrderNo", PayOrderNo);// 商户订单号
            params.put("RechargeType", CoinId);// 0*//*
        *//*subject/totalAmount/body  测试的商品 该测试商品的详细描述*//*
                params.put("subject", "测试的商品");
                params.put("totalAmount", "0.01");
                params.put("body", "该测试商品的详细描述");

                params.put("UserId", "27491");
                params.put("RechargeAmount", "0.01");// 总价
                params.put("PayAmount", "0.1");// 实际价格
                params.put("PayType", payType + "");// 支付类型（微信0，支付宝1）

                // params.put("PayOrderNo", PayOrderNo);// 商户订单号

                params.put("tradeNo", PayOrderNo);// 商户订单号
                params.put("RechargeType", "0");
                FrameHttpHelper.getInstance().post("https://qy.healthinfochina.com:8080/DOC800010001", params, new FrameHttpCallback<PayBeanCode>() {
                    @Override
                    public void onSuccess(PayBeanCode o) {
                        try {
                            Log.e("zfbcode", o.getRESCOD());
                       *//* JSONArray arr = new JSONArray(0);
                        JSONObject jb = (JSONObject) arr.get(0);
                        String result = jb.getString("Result");*//*
                            String result = o.getRESCOD();

                            Message msg = Message.obtain();
                            msg.obj = result;
                            msg.what = Integer.valueOf(payType);

                            // TODO 5 判断支付方式
                            hand.sendMessage(msg);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }

                    @Override
                    public void onFail(String s) {

                    }
                });
            } else {
                Message msg = Message.obtain();
                msg.obj = "000000";
                msg.what = Integer.valueOf(payType);

                // TODO 5 判断支付方式
                hand.sendMessage(msg);
            }
           *//* String strUrltoken = "http://51yuejianshen.com/index.php?g=home&m=coin&a=recharge";
            StringRequest tokenRequest = new StringRequest(Request.Method.POST, strUrltoken,
                    new Response.Listener<String>() {
                        public void onResponse(String arg0) {
                            try {
                                JSONArray arr = new JSONArray(arg0);
                                JSONObject jb = (JSONObject) arr.get(0);
                                String result = jb.getString("Result");
                                Message msg = Message.obtain();
                                msg.obj = result;
                                msg.what = Integer.valueOf(payType);

                                // TODO 5 判断支付方式
                                hand.sendMessage(msg);
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }

                        }
                    }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError arg0) {
                }
            }) {

                @Override
                protected Map<String, String> getParams() {
                    *//**//*
                    * Userid=27491
                    * PayType=1或者0
                    * RechargeAmount=1
                    * payAmount=1.0
                    * CoinId="0"
                    * *//**//*

                    Map<String, String> params = new HashMap<String, String>();
                  *//**//*  params.put("UserId", UserID);
                    params.put("RechargeAmount", CoinPrice);// 总价
                    params.put("PayAmount", CoinAmount + "");// 实际价格
                    params.put("PayType", payType + "");// 支付类型（微信0，支付宝1）
                    params.put("PayOrderNo", PayOrderNo);// 商户订单号
                    params.put("RechargeType", CoinId);// 0*//**//*
                    params.put("UserId", "27491");
                    params.put("RechargeAmount", "0.1");// 总价
                    params.put("PayAmount", "0.1");// 实际价格
                    params.put("PayType", payType + "");// 支付类型（微信0，支付宝1）
                    params.put("PayOrderNo", PayOrderNo);// 商户订单号
                    params.put("RechargeType", "0");
                    return params;
                }
            };
            mRequestQueue.add(tokenRequest);*//*

        }

    }

    // TODO 6 判断是否订单成功 成功时候用来判断支付方式进行各自的支付
    private Handler hand = new Handler() {
        public void handleMessage(Message msg) {
            diaLog.dismiss();
            String result = (String) msg.obj;

            if (result.equals("000000")) {
                switch (msg.what) {
                    case 1:
                        //TODO 6.0 微信支付
                        WXPay();
                        break;
                    case 0:
                        //TODO 6.1 支付宝支付
                        ZfbPay();
                        break;
                }
            } else {
                //TODO 7 否则支付失败弹出吐司提示 弹出提示信息
                TiShi();
            }
        }

        ;
    };

    // 提示信息
    public void TiShi() {
        Toast toast = Toast.makeText(this, "支付失败", Toast.LENGTH_SHORT);
        toast.setGravity(Gravity.TOP, 0, 3);
        toast.show();
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            exit();
            return false;
        }
        return super.onKeyDown(keyCode, event);
    }


    //TODO 微信支付方式
    // 微信支付


    // 加载微信对象
    private void initWX() {
        req = new PayReq();
        sb = new StringBuffer();
    }

    public void WXPay() {
      // TODO 6.0.1 微信订单金额，单位是：分 mtotal_amount
        String str = String.valueOf(Double.valueOf(CoinAmount) * 100);
        String[] strs = str.split("[.]");
        wx_CoinPrice = strs[0];*//*
        String str = String.valueOf(Double.valueOf(mtotal_amount) * 100);
        String[] strs = str.split("[.]");
        wx_CoinPrice = strs[0];
        Map<String, Object> params = new HashMap<String, Object>();
        /*//*  params.put("UserId", UserID);
        *//*    params.put("RechargeAmount", CoinPrice);// 总价
            params.put("PayAmount", CoinAmount + "");// 实际价格
            params.put("PayType", payType + "");// 支付类型（微信0，支付宝1）
            params.put("PayOrderNo", PayOrderNo);// 商户订单号
            params.put("RechargeType", CoinId);// 0*//*
        *//*subject/totalAmount/body  测试的商品 该测试商品的详细描述*//*
*//*        params.put("subject", "测试的商品");
        params.put("totalAmount", "1");
        params.put("body", "该测试商品的详细描述");*//*
        params.put("totalFee", wx_CoinPrice);
*//*
        params.put("UserId", "27491");
        params.put("RechargeAmount", "0.01");// 总价
        params.put("PayAmount", "0.1");// 实际价格
        params.put("PayType", payType + "");// 支付类型（微信0，支付宝1）*//*

        // params.put("PayOrderNo", PayOrderNo);// 商户订单号

        params.put("tradeNo", PayOrderNo);// 商户订单号
        params.put("RechargeType", "0");
        FrameHttpHelper.getInstance().post("https://qy.healthinfochina.com:8080/DOC800010002", params, new FrameHttpCallback<WxPayBean>() {
            @Override
            public void onSuccess(WxPayBean wxPayBean) {
                if (null != wxPayBean) {
                    PayReq req = new PayReq();
                    req.appId=wxPayBean.getAppid();
                    req.partnerId = wxPayBean.getPartnerid();
                    req.prepayId = wxPayBean.getPrepayid();
                    req.nonceStr = wxPayBean.getNoncestr();
                    req.timeStamp =wxPayBean.getTimestamp() + "";
                    req.packageValue =wxPayBean.getPackageX();
                   *//*  req.appId = Constants.APP_ID;
                    req.partnerId = Constants.PARTNER_ID;
                    req.prepayId = wxPayBean.getPrepayid();
                    req.nonceStr = genNonceStr();
                    req.timeStamp = genTimeStamp() + "";
                    req.packageValue = "Sign=WXPay";
                   //将所有的参数去进行Singn签名
                    SortedMap<Object, Object> parameters = new TreeMap<Object, Object>();
                    parameters.put("appid", req.appId);
                    parameters.put("noncestr", req.nonceStr);
                    parameters.put("package", req.packageValue);
                    parameters.put("partnerid", req.partnerId);
                    parameters.put("prepayid", req.prepayId);
                    parameters.put("timestamp", req.timeStamp);

                    String characterEncoding = "UTF-8";
                    String mySign = createSign(characterEncoding, parameters);
                    req.sign = mySign;*//*
                    req.sign=wxPayBean.getSign();
                    Toast.makeText(PayMoneyActivity.this, "正常调起支付", Toast.LENGTH_SHORT).show();
                    // 在支付之前，如果应用没有注册到微信，应该先调用IWXMsg.registerApp将应用注册到微信
                    try {
                        msgApi.sendReq(req);
                    } catch (Exception e) {
                        Log.e("res_erro", e.toString());
                    }
                } else {
                    Toast.makeText(PayMoneyActivity.this, "返回错误" + wxPayBean.toString(), Toast.LENGTH_SHORT).show();
                }

            }

            @Override
            public void onFail(String s) {

            }
        });


    }


    *//*
       * 微信异步
       *//*
    private class GetPrepayIdTask extends AsyncTask<Void, Void, Map<String, String>> {

        private ProgressDialog dialog;

        @Override
        protected void onPreExecute() {

            dialog = ProgressDialog.show(PayMoneyActivity.this, "提示", "正在生成订单请稍后...");
        }

        @Override
        protected void onPostExecute(Map<String, String> result) {
            if (dialog != null) {
                dialog.dismiss();
            }

            // prepay_id 微信生成的预支付回话标识，用于后续接口调用中使用，该值有效期为2小时
            sb.append("prepay_id\n" + result.get("prepay_id") + "\n\n");
            Log.e("string", result.toString());
            resultunifiedorder = result;

            //微信支付参数
            sendPayReq();
        }

        @Override
        protected void onCancelled() {
            super.onCancelled();
        }

        @Override
        protected Map<String, String> doInBackground(Void... params) {

            // 调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易回话标识后再在APP里面调起支付
            String url = String.format("https://api.mch.weixin.qq.com/pay/unifiedorder");
            // 组装参数
            String entity = genProductArgs();

            byte[] buf = Util.httpPost(url, entity);

            String content = new String(buf);
            Log.e("content", content);
            // 解析xml
            Map<String, String> xml = decodeXml(content);

            return xml;
        }
    }

    *//*
  * 微信解析xml类型返回值
  *//*
    public Map<String, String> decodeXml(String content) {

        try {
            Map<String, String> xml = new HashMap<String, String>();
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(new StringReader(content));
            int event = parser.getEventType();
            while (event != XmlPullParser.END_DOCUMENT) {

                String nodeName = parser.getName();
                switch (event) {
                    case XmlPullParser.START_DOCUMENT:
                        break;
                    case XmlPullParser.START_TAG:
                        if ("xml".equals(nodeName) == false) {
                            // 实例化student对象
                            xml.put(nodeName, parser.nextText());
                        }
                        break;
                    case XmlPullParser.END_TAG:
                        break;
                }
                event = parser.next();
            }
            return xml;
        } catch (Exception e) {
        }
        return null;

    }

    // 随机字符串
    private String genNonceStr() {
        Random random = new Random();
        return MD5.getMessageDigest(String.valueOf(random.nextInt(10000)).getBytes());
    }

    // 微信获取时间戳参数
    private long genTimeStamp() {
        return System.currentTimeMillis() / 1000;
    }

    *//**
     * 微信支付签名算法sign
     *
     * @param characterEncoding
     * @param parameters
     * @return
     *//*
    public static String createSign(String characterEncoding,
                                    SortedMap<Object, Object> parameters) {

        StringBuffer sb = new StringBuffer();
        Set es = parameters.entrySet();// 所有参与传参的参数按照accsii排序（升序）
        Iterator it = es.iterator();
        while (it.hasNext()) {
            @SuppressWarnings("rawtypes")
            Map.Entry entry = (Map.Entry) it.next();
            String k = (String) entry.getKey();
            Object v = entry.getValue();
            if (null != v && !"".equals(v) && !"sign".equals(k)
                    && !"key".equals(k)) {
                sb.append(k + "=" + v + "&");
            }
        }
        sb.append("key=" + Constants.PARTNER_KEY); //KEY是商户秘钥
        String sign = MD5Util.MD5Encode(sb.toString(), characterEncoding)
                .toUpperCase();
        return sign; // D3A5D13E7838E1D453F4F2EA526C4766
        // D3A5D13E7838E1D453F4F2EA526C4766
    }

	*//*
     * private String genOutTradNo() { Random random = new Random(); return
	 * MD5.getMessageDigest(String.valueOf(random.nextInt(10000)).getBytes()); }
	 *//*

    // 微信预支付交易单url参数
    private String genProductArgs() {

        StringBuffer xml = new StringBuffer();
        try {
            String nonceStr = genNonceStr();

            xml.append("</xml>");
            List<NameValuePair> packageParams = new LinkedList<NameValuePair>();

            packageParams.add(new BasicNameValuePair("appid", Constants.APP_ID));// 应用ID
            packageParams.add(new BasicNameValuePair("body", CoinName));// 商品描述
            packageParams.add(new BasicNameValuePair("mch_id", MCH_ID));// 商户号
            packageParams.add(new BasicNameValuePair("nonce_str", nonceStr));// 随机字符串
            packageParams.add(new BasicNameValuePair("notify_url", "http://51yuejianshen.com"));// 接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数
            packageParams.add(new BasicNameValuePair("out_trade_no", PayOrderNo));// 商户订单号
            packageParams.add(new BasicNameValuePair("spbill_create_ip", getPhoneIp()));// 用户端实际IP
            packageParams.add(new BasicNameValuePair("total_fee", wx_CoinPrice));// 订单总金额，单位：分
            packageParams.add(new BasicNameValuePair("trade_type", "APP"));// 支付类型

            String sign = genPackageSign(packageParams);
            packageParams.add(new BasicNameValuePair("sign", sign));// 签名
            String xmlstring = toXml(packageParams);
            // 解决body传中文报签名错误的问题，生成的xml请求参数转为字节数组后，用“ISO8859-1”编码格式进行编码为字符
            return new String(xmlstring.getBytes(), "ISO8859-1");

        } catch (Exception e) {
            return null;
        }
    }

    // 微信获取终端ip
    public static String getPhoneIp() {

        // 此方法仅适用于android2.3以下，且返回的为ipv6地址
        try {
            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
                NetworkInterface intf = en.nextElement();
                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
                    InetAddress inetAddress = enumIpAddr.nextElement();
                    if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {
                        // if (!inetAddress.isLoopbackAddress() && inetAddress
                        // instanceof Inet6Address) {
                        return inetAddress.getHostAddress().toString();
                    }
                }
            }
        } catch (Exception e) {
        }
        return "127.0.0.1";
    }

    // 微信预支付转为xml
    private String toXml(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();
        sb.append("<xml>");
        for (int i = 0; i < params.size(); i++) {
            sb.append("<" + params.get(i).getName() + ">");
            sb.append(params.get(i).getValue());
            sb.append("</" + params.get(i).getName() + ">");
        }
        sb.append("</xml>");

        return sb.toString();
    }

    // 微信生成签名
    private String genPackageSign(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < params.size(); i++) {
            sb.append(params.get(i).getName());
            sb.append('=');
            sb.append(params.get(i).getValue());
            sb.append('&');
        }
        sb.append("key=");
        sb.append(PARTNER_KEY);

        String packageSign = MD5.getMessageDigest(sb.toString().getBytes()).toUpperCase();
        return packageSign;
    }

    *//*
     * 微信支付参数
     *//*
    private void sendPayReq() {
        req.appId = Constants.APP_ID;//
        req.nonceStr = genNonceStr();
        req.packageValue = "Sign=WXPay";
        req.partnerId = MCH_ID;// 商户号
        req.prepayId = resultunifiedorder.get("prepay_id");// 预支付回话标示
        req.timeStamp = String.valueOf(genTimeStamp());

        List<NameValuePair> signParams = new LinkedList<NameValuePair>();
        signParams.add(new BasicNameValuePair("appid", req.appId));
        signParams.add(new BasicNameValuePair("noncestr", req.nonceStr));
        signParams.add(new BasicNameValuePair("package", req.packageValue));
        signParams.add(new BasicNameValuePair("partnerid", req.partnerId));
        signParams.add(new BasicNameValuePair("prepayid", req.prepayId));
        signParams.add(new BasicNameValuePair("timestamp", req.timeStamp));

        req.sign = genAppSign(signParams);

        sb.append("sign\n" + req.sign + "\n\n");

        // 生成订单
        //	msgApi.registerApp(Constants.APP_ID);
        try {

            msgApi.sendReq(req);
        } catch (Exception e) {
            Log.e("dd", e.getMessage());
            e.printStackTrace();
        }
    }

    // 微信获取支付签名
    private String genAppSign(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < params.size(); i++) {
            sb.append(params.get(i).getName());
            sb.append('=');
            sb.append(params.get(i).getValue());
            sb.append('&');
        }
        sb.append("key=");
        sb.append(PARTNER_KEY);

        this.sb.append("sign str\n" + sb.toString() + "\n\n");
        String appSign = MD5.getMessageDigest(sb.toString().getBytes());
        return appSign;
    }

    public void exit() {
        finish();
        overridePendingTransition(R.anim.fade_in, R.anim.fade_out);

    }*/